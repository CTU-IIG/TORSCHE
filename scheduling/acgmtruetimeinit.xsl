<?xml version="1.0" encoding="UTF-8"?>
<!-- generate init function for Matlab/Simulink-based simulator for real-time control systems TrueTime -->
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="2.0" > 
                      
    
    <xsl:output method="text" encoding="UTF-8"/>
    <xsl:template match="/matlabdata">
        
        <xsl:text>function simple_init</xsl:text>
        
        <xsl:text>&#10;</xsl:text>
        <xsl:text>% &#10;</xsl:text>
        <xsl:text>% This document was automatically generated by Code Generator for Scheduling toolbox </xsl:text>        
        <xsl:text>&#10;</xsl:text>
        <xsl:text>% &#10;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        
        <xsl:text>ttInitKernel(</xsl:text>
        <xsl:value-of select="count(/matlabdata/taskset/tsuserparam/struct/struct[@name='CodeGenerationData']/struct[@name='Variables']/struct[char[@name='Type'] = 'input'])"/>
        <xsl:text>,</xsl:text>
        <xsl:value-of select="count(/matlabdata/taskset/tsuserparam/struct/struct[@name='CodeGenerationData']/struct[@name='Variables']/struct[char[@name='Type']='output'])"/>
        <xsl:text>,'prioFP');</xsl:text>
        <xsl:text>% nbrOfInputs, nbrOfOutputs, fixed priority</xsl:text>
        <xsl:text>&#10;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        <xsl:text>data.frequency=</xsl:text>
        <xsl:value-of select="/matlabdata/taskset/tsuserparam/struct/struct[@name='CodeGenerationData']/double[@name='SimulationFrequency']/item"/>
        <xsl:text>;</xsl:text>
        <xsl:text>    %simulation frequency </xsl:text>
        <xsl:text>&#10;</xsl:text>
        <!--  initialization of variables  -->
        <xsl:for-each select="/matlabdata/taskset/tsuserparam/struct/struct[@name='CodeGenerationData']/struct[@name='Variables']/struct[char='memory'][char/@name='Type']">
            <xsl:text>data.reg</xsl:text>
            <xsl:value-of select="position()"/>
            <xsl:text>=</xsl:text>
            <xsl:value-of select="./double[@name='InitValue']/item"/>
            <xsl:text>;</xsl:text>
            <xsl:text>    % initialization of variable </xsl:text>
            <xsl:value-of select="char[@name='Name']"/>
            <xsl:text>&#10;</xsl:text>
        </xsl:for-each>
        
        <xsl:for-each select="/matlabdata/taskset/tsuserparam/struct/struct[@name='CodeGenerationData']/struct[@name='Variables']/struct[char[@name='Type']='output']">
            <xsl:variable name="NumberOfVarialses" select="count(/matlabdata/taskset/tsuserparam/struct/struct[@name='CodeGenerationData']/struct[@name='Variables']/struct[char='memory'][char/@name='Type'])"></xsl:variable>            
            <xsl:text>data.reg</xsl:text>
            <xsl:value-of select="$NumberOfVarialses+position()"/>
            <xsl:text>=</xsl:text>
            <xsl:value-of select="./double[@name='InitValue']/item"/>
            <xsl:text>;</xsl:text>
            <xsl:text>    % initialization of variable </xsl:text>
            <xsl:value-of select="char[@name='Name']"/>
            <xsl:text>&#10;</xsl:text>
        </xsl:for-each>
        
        <!--  initialization of units  -->
        <xsl:for-each select="/matlabdata/taskset/tsuserparam/struct/struct[@name='CodeGenerationData']/struct[@name='Processors']/struct">
            <xsl:text>data.units.unit</xsl:text>
            <xsl:value-of select="position()"/>
            <xsl:text>= [0</xsl:text>
            <xsl:call-template name="InitUnit">
                <xsl:with-param name="Index" select="double[@name='Latency']/item"></xsl:with-param>
            </xsl:call-template>
            <xsl:text>];</xsl:text>
            <xsl:text>    % initialization of unit </xsl:text>
            <xsl:value-of select="char[@name='Operator']"/>
            <xsl:text>&#10;</xsl:text>
        </xsl:for-each>
        
        <!--  initialization of constants  -->
        <xsl:for-each select="/matlabdata/taskset/tsuserparam/struct/struct[@name='CodeGenerationData']/struct[@name='Variables']/struct[char='constant'][char/@name='Type']">
            <xsl:text>data.const</xsl:text>
            <xsl:value-of select="position()"/>
            <xsl:text>=</xsl:text>
            <xsl:value-of select="./double[@name='InitValue']/item"/>
            <xsl:text>;</xsl:text>
            <xsl:text>    % initialization of constant </xsl:text>
            <xsl:value-of select="char[@name='Name']"/>
            <xsl:text>&#10;</xsl:text>
        </xsl:for-each>
        <xsl:text>w=</xsl:text>
        <xsl:value-of select="/matlabdata/taskset/task[1]/schedule/period"/>
        <xsl:text>;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        <xsl:text>period = w/data.frequency;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        <xsl:text>deadline = period;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        <xsl:text>offset = 0;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        <xsl:text>prio = 1;</xsl:text>
        <xsl:text>&#10;</xsl:text>
        <xsl:text>ttCreatePeriodictask('task1', offset, period, prio, 'code', data);</xsl:text>
        <xsl:text>&#10;</xsl:text>
    </xsl:template>
    
    
    
    <xsl:template name="InitUnit">
        <xsl:param name="Index"></xsl:param>
        <xsl:choose>
            <xsl:when test="$Index =1">
                <xsl:text>,0</xsl:text>
            </xsl:when>
            <xsl:otherwise>
                <xsl:text>,0</xsl:text>
                <xsl:call-template name="InitUnit">
                    <xsl:with-param name="Index" select="$Index - 1"></xsl:with-param>
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>
    
</xsl:stylesheet>
